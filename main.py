import json
import os
import re
import asyncio
import nest_asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ event loop
nest_asyncio.apply()

# –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ config, —Ç–æ–∫–µ–Ω –≤—à–∏—Ç –Ω–∞–ø—Ä—è–º—É—é
BOT_TOKEN = "7384051613:AAGritfiJRNV_ykW47QgR-q_Lk7qm6kirXs"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DATA_FILE = "tasks.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_tasks():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
def save_tasks(tasks):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, indent=2, ensure_ascii=False)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
def generate_task_id(tasks):
    existing_ids = [int(t["id"]) for t in tasks if "id" in t]
    return str(max(existing_ids) + 1) if existing_ids else "101"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
def parse_completion(message_text):
    match = re.match(r"(\d+)\s+–≥–æ—Ç–æ–≤–æ", message_text.lower())
    return match.group(1) if match else None

# –†–∞–∑–±–æ—Ä –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def parse_task_text(text):
    lines = text.strip().split("\n")
    if len(lines) < 4:
        return None
    return {
        "title": lines[0].strip(),
        "deadline": lines[1].strip(),
        "priority": lines[2].strip(),
        "assignee": lines[3].strip().lower(),
    }

@dp.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ\n11.05.2025\n–ö—Ä–∞—Å–Ω—ã–π\n@username")

@dp.message()
async def handle_task_message(message: Message):
    text = message.text.strip()
    user = message.from_user.username
    tasks = load_tasks()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    completed_id = parse_completion(text)
    if completed_id:
        updated = [t for t in tasks if t["id"] != completed_id]
        if len(updated) < len(tasks):
            save_tasks(updated)
            await message.answer(f"üì¶ –ó–∞–¥–∞—á–∞ {completed_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")
        else:
            await message.answer("‚ùó–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if text.lower() in ["/–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á–∏"]:
        user_tasks = [t for t in tasks if t["author"] == f"@{user}" or t["assignee"] == f"@{user}"]
        if not user_tasks:
            await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return
        response = "üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for t in user_tasks:
            response += f"üîπ {t['id']} ‚Äî {t['title']} ‚Äî üìÖ {t['deadline']} üîµ {t['priority']} üë§ {t['assignee']}\n"
        await message.answer(response)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    parsed = parse_task_text(text)
    if not parsed:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n11.05.2025\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n@username")
        return

    new_task = {
        "id": generate_task_id(tasks),
        "title": parsed["title"],
        "deadline": parsed["deadline"],
        "priority": parsed["priority"],
        "assignee": parsed["assignee"],
        "author": f"@{user}",
    }
    tasks.append(new_task)
    save_tasks(tasks)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {new_task['id']})")

async def main():
    print("\nüìÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á–∏...")
    await dp.start_polling(bot)

# –í–º–µ—Å—Ç–æ asyncio.run, –≤—ã–∑—ã–≤–∞–µ–º main –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ loop
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
