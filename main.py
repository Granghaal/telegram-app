from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
import json
import os

from config import BOT_TOKEN, ADMIN_USERNAMES
from functions import get_active_tasks, save_task, load_tasks

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–∏—à–∏ /webapp —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞—á.")

@dp.message_handler(commands=["webapp", "web"])
async def open_webapp(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞—á üß©",
            web_app=WebAppInfo(url="https://granghaal.github.io/telegram-app/")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
        )
    )
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:", reply_markup=keyboard)

@dp.message_handler(commands=["–ø–ª–∞–Ω–µ—Ä–∫–∞"])
async def send_task_summary(message: types.Message):
    if message.from_user.username not in ADMIN_USERNAMES:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    tasks = get_active_tasks()
    text = "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"

    if not tasks:
        text += "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
    else:
        for t in tasks:
            deadline = t.get("deadline", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            priority = t.get("priority", "–æ–±—ã—á–Ω—ã–π")
            category = t.get("category", "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            author = t.get("author", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            title = t.get("title", "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            text += f"\n‚Ä¢ {title} ‚Äî üìÅ {category} üî¥ {priority} ‚è∞ {deadline} üßë‚Äçüíº {author}"

    await message.answer(text)

@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def receive_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        save_task(data)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    executor.start_polling(dp, skip_updates=True)
