# NOTE: This code requires Python environment with ssl support for aiogram (via aiohttp).
# If running in a sandbox or limited environment, ensure ssl module is available.

import json
import os
import re
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message

BOT_TOKEN = "7384051613:AAGritfiJRNV_ykW47QgR-q_Lk7qm6kirXs"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)

DATA_FILE = "tasks.json"
SETTINGS_FILE = "settings.json"

PRIORITY_MAP = {
    "–∫—Ä–∞—Å–Ω—ã–π": "üî¥",
    "–≤—ã—Å–æ–∫–∏–π": "üî¥",
    "–æ—Ä–∞–Ω–∂–µ–≤—ã–π": "üü†",
    "—Å—Ä–µ–¥–Ω–∏–π": "üü†",
    "–∂–µ–ª—Ç—ã–π": "üü°",
    "–Ω–∏–∑–∫–∏–π": "üü°",
    "–∑–µ–ª–µ–Ω—ã–π": "üü¢",
    "–Ω–∏–∑—à–∏–π": "üü¢"
}

# ===== JSON FILES =====
def load_tasks():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_tasks(tasks):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, indent=2, ensure_ascii=False)

def load_settings():
    if not os.path.exists(SETTINGS_FILE):
        return {}
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)

# ===== HELPERS =====
def generate_task_id(tasks):
    existing_ids = [int(t["id"]) for t in tasks if "id" in t]
    return str(max(existing_ids) + 1) if existing_ids else "101"

def parse_completion(message_text):
    match = re.findall(r"\b(\d+)\b", message_text.lower())
    if "–≥–æ—Ç–æ–≤–æ" in message_text.lower() and match:
        return match
    return []

def get_priority_emoji(priority_text):
    return PRIORITY_MAP.get(priority_text.lower(), "üîò")

# ===== COMMANDS =====

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
@dp.message(F.text.lower() == "/start")
async def handle_start(message: Message):
    await message.answer(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ\n11.05.2025\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π/–≤—ã—Å–æ–∫–∏–π –∏ —Ç.–¥.)\n@username\n"
        "(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–µ—Ä–∏–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –µ–∂–µ–º–µ—Å—è—á–Ω–æ 3 —á–∏—Å–ª–∞"
    )

@dp.message(F.text.lower().startswith("–∑–∞–¥–∞—á–∏"))
async def show_tasks(message: Message):
    user = message.from_user.username
    text = message.text.strip()
    match = re.match(r"–∑–∞–¥–∞—á–∏\s+(@\w+)", text.lower())
    target_user = match.group(1).lower() if match else f"@{user}"

    tasks = load_tasks()
    tasks = sorted(tasks, key=lambda x: list(PRIORITY_MAP).index(x["priority"]) if x.get("priority") in PRIORITY_MAP else 99)
    user_tasks = [t for t in tasks if not t.get("done") and (t["author"] == target_user or t["assignee"] == target_user)]
    if not user_tasks:
        await message.answer(f"‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è {target_user}.")
        return
    text = f"üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è {target_user}:\n"
    for t in user_tasks:
        text += f"üîπ {t['id']} ‚Äî {t['title']} ‚Äî üìÖ {t['deadline']} {get_priority_emoji(t['priority'])} {t['priority']} üë§ {t['assignee']}\n"
    await message.answer(text)

@dp.message()
async def handle_general(message: Message):
    text = message.text.strip()
    user = message.from_user.username
    tasks = load_tasks()

    ids_to_archive = parse_completion(text)
    if ids_to_archive:
        updated = [t for t in tasks if t["id"] not in ids_to_archive]
        archived = [t for t in tasks if t["id"] in ids_to_archive]
        if archived:
            for t in archived:
                t["done"] = True
            save_tasks(tasks)
            await message.answer(f"üì¶ –ó–∞–¥–∞—á–∏ {' '.join(ids_to_archive)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        else:
            await message.answer("‚ùó–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    new_task = {
        "id": generate_task_id(tasks),
        "title": text,
        "deadline": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
        "priority": "–æ–±—ã—á–Ω—ã–π",
        "assignee": f"@{user}",
        "repeat": "",
        "author": f"@{user}",
        "done": False
    }
    tasks.append(new_task)
    save_tasks(tasks)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {new_task['id']})")
